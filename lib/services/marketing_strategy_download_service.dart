import 'dart:io';
import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import '../models/marketing_strategy.dart';

class MarketingStrategyDownloadService {
  static Future<void> downloadStrategy({
    required MarketingStrategy strategy,
    required String platform,
    required String productName,
  }) async {
    try {
      // Generate PDF directly
      await generatePDF(
        strategy: strategy,
        platform: platform,
        productName: productName,
      );
    } catch (e) {
      print('Download failed: $e');
    }
  }

  // Generate PDF Document
  static Future<void> generatePDF({
    required MarketingStrategy strategy,
    required String platform,
    required String productName,
  }) async {
    try {
      final pdf = pw.Document();
      
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // Header
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(20),
                  decoration: pw.BoxDecoration(
                    color: _getPlatformColor(platform),
                    borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                  ),
                  child: pw.Row(
                    children: [
                      _getPlatformIcon(platform),
                      pw.SizedBox(width: 10),
                      pw.Text(
                        'Marketing Strategy for $platform',
                        style: pw.TextStyle(
                          fontSize: 20,
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.white,
                        ),
                      ),
                    ],
                  ),
                ),
                pw.SizedBox(height: 20),
                
                // Product Info
                pw.Text(
                  'Product: $productName',
                  style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold),
                ),
                pw.SizedBox(height: 10),
                
                // Content Ideas
                _buildPDFSection(
                  'üì∏ Content Ideas for $platform',
                  strategy.contentIdeas,
                  PdfColors.blue,
                ),
                pw.SizedBox(height: 15),
                
                // Hashtags
                _buildPDFHashtags(strategy.hashtags),
                pw.SizedBox(height: 15),
                
                // Posting Times
                _buildPDFSection(
                  '‚è∞ Best Posting Times on $platform',
                  [strategy.postingTimes],
                  PdfColors.green,
                ),
                pw.SizedBox(height: 15),
                
                // Pricing Strategies
                _buildPDFSection(
                  'üí∞ Pricing Strategies for $platform',
                  strategy.pricingStrategies,
                  PdfColors.orange,
                ),
                pw.SizedBox(height: 15),
                
                // Engagement Tactics
                _buildPDFSection(
                  'üéØ Engagement Tactics for $platform',
                  strategy.engagementTactics,
                  PdfColors.purple,
                ),
                pw.SizedBox(height: 20),
                
                // Footer
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(10),
                  decoration: pw.BoxDecoration(
                    color: PdfColors.grey300,
                    borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
                  ),
                  child: pw.Text(
                    'Generated by Kalakriti - Empowering Artisans',
                    style: pw.TextStyle(
                      fontSize: 12,
                      color: PdfColors.grey700,
                    ),
                    textAlign: pw.TextAlign.center,
                  ),
                ),
              ],
            );
          },
        ),
      );

      // Save PDF
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/marketing_strategy_${platform}_${DateTime.now().millisecondsSinceEpoch}.pdf');
      await file.writeAsBytes(await pdf.save());
      
      // Share PDF
      await Share.shareXFiles([XFile(file.path)], text: 'Marketing Strategy for $platform - $productName');
      
    } catch (e) {
      print('PDF generation failed: $e');
    }
  }

  // Generate Text Strategy for sharing
  static Future<void> generateTextStrategy({
    required MarketingStrategy strategy,
    required String platform,
    required String productName,
  }) async {
    try {
      final strategyText = '''
üéØ Marketing Strategy for $platform

üì∏ Content Ideas:
${strategy.contentIdeas.map((idea) => '‚Ä¢ $idea').join('\n')}

 HASHTAGS:
${strategy.hashtags.join(' ')}

‚è∞ Best Posting Times:
${strategy.postingTimes}

üí∞ Pricing Strategies:
${strategy.pricingStrategies.map((strategy) => '‚Ä¢ $strategy').join('\n')}

üéØ Engagement Tactics:
${strategy.engagementTactics.map((tactic) => '‚Ä¢ $tactic').join('\n')}

Generated by Kalakriti - Empowering Artisans
''';

      await Share.share(
        strategyText,
        subject: 'Marketing Strategy for $platform - $productName',
      );
    } catch (e) {
      print('Text sharing failed: $e');
    }
  }

  // Helper methods for PDF
  static pw.Widget _buildPDFSection(String title, List<String> items, PdfColor color) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          title,
          style: pw.TextStyle(
            fontSize: 14,
            fontWeight: pw.FontWeight.bold,
            color: color,
          ),
        ),
        pw.SizedBox(height: 8),
        ...items.map((item) => pw.Padding(
          padding: const pw.EdgeInsets.only(left: 8, bottom: 4),
          child: pw.Text('‚Ä¢ $item'),
        )),
      ],
    );
  }

  static pw.Widget _buildPDFHashtags(List<String> hashtags) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          ' Hashtags',
          style: pw.TextStyle(
            fontSize: 14,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.pink,
          ),
        ),
        pw.SizedBox(height: 8),
        pw.Wrap(
          children: hashtags.map((hashtag) => pw.Container(
            margin: const pw.EdgeInsets.only(right: 4, bottom: 4),
            padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: pw.BoxDecoration(
              color: PdfColors.pink100,
              borderRadius: const pw.BorderRadius.all(pw.Radius.circular(12)),
            ),
            child: pw.Text(
              hashtag,
              style: pw.TextStyle(
                color: PdfColors.pink,
                fontSize: 10,
              ),
            ),
          )).toList(),
        ),
      ],
    );
  }


  // Platform-specific colors and icons
  static PdfColor _getPlatformColor(String platform) {
    switch (platform.toLowerCase()) {
      case 'gaatha':
        return PdfColors.orange;
      case 'flipkart samarth':
        return PdfColors.blue;
      case 'pinterest':
        return PdfColors.red;
      case 'instagram':
        return PdfColors.pink;
      case 'facebook':
        return PdfColors.blue;
      default:
        return PdfColors.blue;
    }
  }

  static Color _getPlatformColorFlutter(String platform) {
    switch (platform.toLowerCase()) {
      case 'gaatha':
        return Colors.orange;
      case 'flipkart samarth':
        return Colors.blue;
      case 'pinterest':
        return Colors.redAccent;
      case 'instagram':
        return Colors.pink;
      case 'facebook':
        return Colors.blue;
      default:
        return Colors.blue;
    }
  }

  static pw.Widget _getPlatformIcon(String platform) {
    switch (platform.toLowerCase()) {
      case 'gaatha':
        return pw.Text('üìö', style: pw.TextStyle(fontSize: 24));
      case 'flipkart samarth':
        return pw.Text('üè™', style: pw.TextStyle(fontSize: 24));
      case 'pinterest':
        return pw.Text('üìå', style: pw.TextStyle(fontSize: 24));
      case 'instagram':
        return pw.Text('üì∏', style: pw.TextStyle(fontSize: 24));
      case 'facebook':
        return pw.Text('üë•', style: pw.TextStyle(fontSize: 24));
      default:
        return pw.Text('üöÄ', style: pw.TextStyle(fontSize: 24));
    }
  }

  static IconData _getPlatformIconFlutter(String platform) {
    switch (platform.toLowerCase()) {
      case 'gaatha':
        return Icons.book;
      case 'flipkart samarth':
        return Icons.store;
      case 'pinterest':
        return Icons.push_pin;
      case 'instagram':
        return Icons.camera_alt;
      case 'facebook':
        return Icons.facebook;
      default:
        return Icons.rocket_launch;
    }
  }
}
